CIF API Change Log

Version 0.3.0
* Changed type names
  Because POSIX reserves type names ending in _t, the names of all types
  provided by the CIF API have been changed to use suffix _tp instead.
* Provisions for recent ICU
  Versions of ICU more recent than the one against which the library was
  initially developed incorporate a change that causes a host of
  const-correctness warnings to be emitted during compilation, mostly from the
  tests.  These issues were resolved with respect to ICU 55-1 (and the code is
  still fine with respect to ICU 4.2.1).
* Building on Win32 / Win64
  Updated for building as a native DLL on Windows (Win32 / Win64).  The
  MinGW-w64 toolchain was specifically targeted, but overall the changes were
  few, and the code is overall very portable, so it is likely that the result
  could be adapted for other Windows toolchains with comparative ease.
* Bulding on OS X
  Not much was really needed to provide for building on OS X, but a small
  build system change cleaned up an issue encountered when relying on Fink for
  dependencies.
* Support for non-standard whitespace and EOL
  Added parser options enabling it to recognize some program-specified
  additional characters as having significance as CIF whitespace or
  end-of-line.  Aimed mainly at early CIFs that use vertical tabs and / or
  form feeds for whitespace and end-of-line purposes, respectively, this
  feature is in fact a bit more general than that.
* Added function cif_get_api_version()
  Added an API function cif_get_api_version() to enable client applications
  to determine which version of the API they are accessing.

Version 0.2.0.3
* Bug in cif_loop_add_item()
  Fixed a bug in which cif_loop_add_item() did not correctly handle a NULL
  default value.
* Documentation of packet iterator effects
  Documentation of the possible negative effects and constraints of open
  packet iterators was added to the general packet iterator description and
  to the docs of cif_loop_get_packets().
* Fixed a narrow text-folding failure case
  The text block line-folding code used by cif_write() could produce invalid
  output because it failed to protect against lines being folded immediately
  before a semicolon (only a problem when not also prefixing).  That issue is
  now resolved.

Version 0.2.0.2
* Issues with ssize_t
  Fixed a header declaration and build configuration issue resulting in
  declarations of type ssize_t not being visible in some places where it is
  used.  Observed on Debian.
* ICU pkg-config package names
  Fixed a build configuration issue arising on Debian, where the pkg-config
  data for ICU are split among multiple logical packages.
* Tests performing exact floating-point comparisons
  Fixed a test implementation issue revolving around exact FP comparisons
  being performed in certain places where approximate comparisons were needed.
  (The tests still use exact comparison where exact agreement is expected.)
* Long time to handle many-packet loops
  Fixed a performance issue associated with adding packets to loops already
  having many packets.
* Minor reorganization
  Merged macros for Unicode code point constants used in different source
  files into a common location (src/internal/values.h).  Added consistent
  source comments to the internal headers indicating that they are not
  intended to be installed.  Changed the scope of one 'extern "C"' block.
  Added a few source comments.
* Added CIF_MEMORY_ERROR
  Added error code CIF_MEMORY_ERROR, and updated substantially all functions
  that perform dynamic memory allocation to raise that error code in the
  event of a memory allocation failure.
* Removed the build dependency on a line-counting command
  Updated the build system -- in particular, the part that generates a header
  file from the database schema -- to remove the need to count lines.  The
  generated header is slightly different, and the code that uses it is
  adjusted to match.

Version 0.2.0.1
* C++ compatibility in cif_cstr_to_ustr()
  Fixed a C++ compatibility issue in cif_cstr_to_ustr()
* Configure script bug
  Fixed an error in the configuration program, related to the
  --enable-c89-enforcement option

Version 0.2.0
* Initial full (beta test) release


Known Issues
* The SQLite back end is slow-ish.
  So far this performance issue is exhibited most clearly by parsing large
  (hundreds of kB) CIFs.  Profiling shows virtually all runtime being consumed
  by SQLite.


