CIF API Change Log

Version 0.2.0.3
* Bug in cif_loop_add_item()
  Fixed a bug in which cif_loop_add_item() did not correctly handle a NULL
  default value.
* Documentation of packet iterator effects
  Documentation of the possible negative effects and constraints of open
  packet iterators was added to the general packet iterator description and
  to the docs of cif_loop_get_packets().

Version 0.2.0.2
* Issues with ssize_t
  Fixed a header declaration and build configuration issue resulting in
  declarations of type ssize_t not being visible in some places where it is
  used.  Observed on Debian.
* ICU pkg-config package names
  Fixed a build configuration issue arising on Debian, where the pkg-config
  data for ICU are split among multiple logical packages.
* Tests performing exact floating-point comparisons
  Fixed a test implementation issue revolving around exact FP comparisons
  being performed in certain places where approximate comparisons were needed.
  (The tests still use exact comparison where exact agreement is expected.)
* Long time to handle many-packet loops
  Fixed a performance issue associated with adding packets to loops already
  having many packets.
* Minor reorganization
  Merged macros for Unicode code point constants used in different source
  files into a common location (src/internal/values.h).  Added consistent
  source comments to the internal headers indicating that they are not
  intended to be installed.  Changed the scope of one 'extern "C"' block.
  Added a few source comments.
* Added CIF_MEMORY_ERROR
  Added error code CIF_MEMORY_ERROR, and updated substantially all functions
  that perform dynamic memory allocation to raise that error code in the
  event of a memory allocation failure.
* Removed the build dependency on a line-counting command
  Updated the build system -- in particular, the part that generates a header
  file from the database schema -- to remove the need to count lines.  The
  generated header is slightly different, and the code that uses it is
  adjusted to match.

Version 0.2.0.1
* C++ compatibility in cif_cstr_to_ustr()
  Fixed a C++ compatibility issue in cif_cstr_to_ustr()
* Configure script bug
  Fixed an error in the configuration program, related to the
  --enable-c89-enforcement option

Version 0.2.0
* Initial full (beta test) release


Known Issues
* The SQLite back end is slow-ish.
  So far this performance issue is exhibited most clearly by parsing large
  (hundreds of kB) CIFs.  Profiling shows virtually all runtime being consumed
  by SQLite.

